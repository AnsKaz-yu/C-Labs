#include <iostream>
#include <fstream>
#include <string>

struct coefficients {
	float a, b, c;
};

coefficients ReadCoefficients(std::string file_name) {
	std::ifstream cinf(file_name);

	float A, B, C;
	cinf >> A >> B >> C;

	cinf.close();

	return { A, B, C };
}

float Discreminant(coefficients equation) {
	float D = equation.b * equation.b - 4 * equation.a * equation.c;
	return D;
}

bool Exceptions(float D) {
	if (D < 0) {
		std::cout << "The discriminant is negative. The equation has no real roots.\n"; //??
		return true;
	}

	return false;
}

std::pair<float, float> CountingRoots(coefficients equation, float D) {
	std::pair<float, float> roots;
	roots.first = (-1 * equation.b - sqrt(D)) / (2 * equation.a);
	roots.second = (-1 * equation.b + sqrt(D)) / (2 * equation.a);

	return roots;
}

void PrintAnswer(std::string massage, std::string file_name) {
	std::ofstream coutf(file_name);
	coutf << massage << '\n';
	coutf.close();
}

std::string ToMassage(std::pair<float, float> roots) {
	std::string massage;
	massage = std::to_string(roots.first) + ' ' + std::to_string(roots.second);
	return massage;
}

void SolveTheQuadraticEquation(std::string input_name, std::string output_name) {
	coefficients C = ReadCoefficients(input_name);
	float D = Discreminant(C);
	std::string massage;

	if (Exceptions(D)) {
		massage = "The discriminant is negative. The equation has no real roots.";
	}
	else {
		std::pair<float, float> roots = CountingRoots(C, D);
		massage = ToMassage(roots);
	}

	PrintAnswer(massage, output_name);
}

int main() {
	std::string input_name, output_name;

	std::cout << "Please, enter the input file name\n";
	std::cin >> input_name;

	std::cout << "Please, enter the output file name\n";
	std::cin >> output_name;

	SolveTheQuadraticEquation(input_name, output_name);
	return 0;
}
